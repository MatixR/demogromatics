ifelse(!is.na(fu.data$patient.assessment.factor) &
fu.data$patient.assessment.factor == 'Yes' &
as.numeric(difftime(fu.data$assess.date, fu.data$enroll.date, units = 'days')) > (9*30),
11,
ifelse(!is.na(fu.data$patient.assessment.factor) & fu.data$patient.assessment.factor == 'Yes',
10,
ifelse(!is.na(fu.data$patient.assess.not.done.factor) &
fu.data$patient.assess.not.done.factor ==
'Non-English speaking patient (not progressed to Follow-up portion of study)',
2,
ifelse((!is.na(fu.data$patient.assess.not.done.factor) &
fu.data$patient.assess.not.done.factor == 'Withdrew') |
!is.na(fu.data$studywd.time),
3,
ifelse((!is.na(fu.data$patient.assess.not.done.factor) &
fu.data$patient.assess.not.done.factor == 'Deceased') |
(is.na(fu.data$hospdis.time) & !is.na(fu.data$death.time)),
4,
ifelse(!is.na(fu.data$patient.assess.not.done.factor) &
fu.data$patient.assess.not.done.factor == 'Refused this assessment',
5,
ifelse(!is.na(fu.data$patient.assess.not.done.factor) &
fu.data$patient.assess.not.done.factor == 'Patient cancelled multiple appointments',
6,
ifelse(!is.na(fu.data$patient.assess.not.done.factor) &
fu.data$patient.assess.not.done.factor ==
'Unable to contact (but verified that patient is alive in Social Security Death Index)',
7,
ifelse(as.numeric(difftime(Sys.Date(), fu.data$enroll.date)) < (5*30), 1, 8)))))))))),
levels = 1:11,
labels = c('Not yet eligible for followup (<5 months after enrollment)',
'Does not speak English; ineligible for followup',
'Withdrew after treatment period',
'Died after treatment period',
'Remains in study, but refused assessment',
'Remains in study, but cancelled appointments',
'Unable to contact, but alive per SSDI',
'Scheduled or trying to contact',
'Assessed, date unknown',
'Assessed within 5-9-month window',
'Assessed outside 5-9-month window'))
## Get list of all patients in "scheduled/trying to contact" category
ttc.pts <- subset(fu.data, fu.status == 'Scheduled or trying to contact')$id
ttc.randomized = inhosp.data$id[inhosp.data$randomized == "1"][!is.na(inhosp.data$id[inhosp.data$randomized == "1"])]
ttc.randomized = as.vector(ttc.randomized)
ttc.index = which(duplicated(c(ttc.pts, ttc.randomized)))
ttc.pts2 = ttc.randomized[ttc.index - length(ttc.pts)]
## Get percentages for all possibilities at followup
fu.pctstrings <- lapply(levels(fu.data$fu.status),
FUN = function(x){get.freqs(subset(fu.data, fu.status == x)$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE, change.denom = TRUE,
use.denom = n.progressed, pctstring = TRUE)})
names(fu.pctstrings) <- levels(fu.data$fu.status)
## Get percentages for whether patient assessed in window
n.assessed <- get.freqs(subset(fu.data,
fu.status %in% c('Assessed, date unknown',
'Assessed within 5-9-month window',
'Assessed outside 5-9-month window'))$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE,
change.denom = TRUE,
use.denom = n.progressed,
pctstring = TRUE)
n.assessed2 <- get.freqs(subset(fu.data,
fu.status %in% c('Assessed, date unknown',
'Assessed within 5-9-month window',
'Assessed outside 5-9-month window',
'Unable to contact, but alive per SSDI'))$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE,
change.denom = TRUE,
use.denom = n.progressed,
pctstring = TRUE)
n.assessedin <- get.freqs(subset(fu.data, fu.status == 'Assessed within 5-9-month window')$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE,
change.denom = TRUE,
use.denom = n.assessed$desc.nums[1,],
pctstring = TRUE)
n.assessedout <- get.freqs(subset(fu.data, fu.status == 'Assessed outside 5-9-month window')$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE,
change.denom = TRUE,
use.denom = n.assessed$desc.nums[1,],
pctstring = TRUE)
## Denominator for followup team: patients alive, not withdrawn, eligible
fu.status.futeam <- c('Scheduled or trying to contact',
'Assessed, date unknown',
'Assessed within 5-9-month window',
'Assessed outside 5-9-month window')
denom.assessedfuteam <- get.freqs(subset(fu.data, fu.status %in% fu.status.futeam)$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE)[1,]
fupct.futeam <- get.freqs(subset(fu.data, fu.status %in% c('Assessed, date unknown',
'Assessed within 5-9-month window',
'Assessed outside 5-9-month window'))$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE,
change.denom = TRUE,
use.denom = denom.assessedfuteam,
pctstring = TRUE)
## Denominator for reporting: everyone alive and eligible
fu.status.report <- c('Remains in study, but refused assessment',
'Remains in study, but cancelled appointments',
'Unable to contact, but alive per SSDI',
'Scheduled or trying to contact',
'Assessed, date unknown',
'Withdrew after hospital discharge',
'Assessed within 5-9-month window',
'Assessed outside 5-9-month window')
denom.assessedreport <- get.freqs(subset(fu.data, fu.status %in% fu.status.report)$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE)[1,]
fupct.report <- get.freqs(subset(fu.data, fu.status %in% c('Assessed, date unknown',
'Assessed within 5-9-month window',
'Assessed outside 5-9-month window'))$study.site.factor,
all.levels = levels(fu.data$study.site.factor),
overall = TRUE,
change.denom = TRUE,
use.denom = denom.assessedreport,
pctstring = TRUE)
fu.table <- do.call('rbind',
list(paste('\\emph{', n.progressed, '}', sep = ''),
fu.pctstrings$'Not yet eligible for followup (<5 months after enrollment)'$desc.strings,
fu.pctstrings$'Does not speak English; ineligible for followup'$desc.strings,
fu.pctstrings$'Withdrew after treatment period'$desc.strings,
fu.pctstrings$'Died after treatment period'$desc.strings,
fu.pctstrings$'Remains in study, but refused assessment'$desc.strings,
fu.pctstrings$'Remains in study, but cancelled appointments'$desc.strings,
fu.pctstrings$'Unable to contact, but alive per SSDI'$desc.strings,
fu.pctstrings$'Scheduled or trying to contact'$desc.strings,
n.assessed$desc.strings,
paste('\\emph{', n.assessedin$desc.strings, '}', sep = ''),
paste('\\emph{', n.assessedout$desc.strings, '}', sep = ''),
rep('', ncol(n.assessedout$desc.strings)),
paste('\\color{darkpastelgreen}\\textbf{', fupct.futeam$desc.strings, '}', sep = ''),
rep('', ncol(n.assessedout$desc.strings)),
paste('\\color{black}\\textbf{', fupct.report$desc.strings, '}', sep = ''),
rep('', ncol(n.assessedout$desc.strings))))
fu.table[,ncol(fu.table)] <- paste('\\textbf{', fu.table[,ncol(fu.table)], '}', sep = '')
rownames(fu.table) <- junk <- c('\\emph{Total number progressed to followup}',
'Not yet eligible (<5 months after enrollment)',
'Does not speak English; ineligible',
'Withdrew after hospital discharge',
'Died after hospital discharge',
'Refused assessment',
'Cancelled multiple appointments',
'Unable to contact, but alive per SSDI',
'Scheduled or trying to contact',
'Assessed',
'~~~\\emph{Assessed within 5-9-month window}',
'~~~\\emph{Assessed outside 5-9-month window}',
'',
'Followup rate for NP team',
'~~~\\color{darkpastelgreen}\\emph{assessed / (assessed + trying to contact)}',
'Followup rate for reporting',
'~~~\\color{black}\\emph{assessed / (assessed + anyone alive and eligible)}')
fu.table = fu.table[, colnames(fu.table) != removed.sites]
ttc.pts2
ttc.pts
ttc.randomized
subset(fu.data, fu.status == 'Scheduled or trying to contact')$id
fupct.futeam
n.assessed
n.assessed2
n.assessedin
fu.status.futeam
unique(fu.data$patient.assess.not.done.factor)
levels(unique(fu.data$patient.assess.not.done.factor))
levels(unique(fu.data$patient.assess.done.factor))
n.assessed
fu.pts
randomized
n.progressed
unique(fu.data$id)
unique(inhosp.data$id)
unique(exc.data$id)
n.assessed
unique(fu.data$id)
site.info
fu.pts
length(fu.pts)
n.progressed
enroll.data$randomized.
enroll.data$randomized.factor
length(enroll.data$randomized.factor)
n.assessed
fu.pts
randomized
ibrary("ggplot2")
library("maps")
library("Hmisc")
states = Cs(tennessee, kentucky, mississippi, alabama, georgia)
tn = map_data("county", region = states)
usa = map_data("county")
Y = mean(tn[tn$subregion == "davidson",]$lat)
X = mean(tn[tn$subregion == "davidson",]$long)
# a degree of latitude is approximately 69 miles
# a degree of longitude is 69 miles at equator
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
theta = seq(0,2.2*pi,length.out = n)
x = center[1] + r*cos(theta)
y = center[2] + r*sin(theta)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
theta = seq(0,2.2*pi,length.out = n)
states = Cs(tennessee, kentucky, mississippi, alabama, georgia)
tn = map_data("county", region = states)
usa = map_data("county")
Y = mean(tn[tn$subregion == "davidson",]$lat)
X = mean(tn[tn$subregion == "davidson",]$long)
# a degree of latitude is approximately 69 miles
# a degree of longitude is 69 miles at equator
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
X
Y
states = Cs(tennessee, kentucky, mississippi, alabama, georgia)
tn = map_data("county", region = states)
usa = map_data("county")
Y = mean(tn[tn$subregion == "davidson",]$lat)
X = mean(tn[tn$subregion == "davidson",]$long)
# a degree of latitude is approximately 69 miles
# a degree of longitude is 69 miles at equator
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + abs(sin(Y))*r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
abs(sin(Y))
states = Cs(tennessee, kentucky, mississippi, alabama, georgia)
tn = map_data("county", region = states)
usa = map_data("county")
Y = mean(tn[tn$subregion == "davidson",]$lat)
X = mean(tn[tn$subregion == "davidson",]$long)
# a degree of latitude is approximately 69 miles
# a degree of longitude is 69 miles at equator
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + 69*abs(sin(Y))*r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + (69*pi/180)*abs(sin(Y))*r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
(69*pi/180)*abs(sin(Y))
(69*pi/180)
(69/pi/180)*abs(sin(Y))
(69*pi/180)/abs(sin(Y))
(69*pi/180)/abs(sin(Y))
(69*pi/180)*abs(sin(Y))
(69*pi/180)*abs(sin(X))
(69*pi/180)/abs(sin(X))
(69*pi/180)/abs(cos(X))
(69*pi/180)/abs(sin(Y))
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + abs(sin(Y))*r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] +r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
y = center[2] + abs(sin(Y))*r*sin(theta*pi/180)
y = Y + abs(sin(Y))*r*sin(theta*pi/180)
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + abs(center[2])*r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + abs(sin(center[2]))*r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
abs(sin(Y))
sin(1)
sin(pi)
sin(0)
sin(2*p9i)
sin(2*pi)
?sin
circle = function(center = c(0,0), r = 1, n = 100){
#r = r*pi/180
#theta = seq(0,2.2*pi,length.out = n)
theta = seq(0,365,length.out = n)
x = center[1] + r*cos(theta*pi/180)
y = center[2] + abs(sin(center[2]*pi/180))*r*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
abs(sin(center[2]*pi/180))
abs(sin(Y*pi/180))
library("demogromatics")
geocode.2010("Atlanta", city = "Atlanta", state = "GA")
geocode.2010("Atlanta", street = "2300 Windy Ridge Pkwy" city = "Atlanta", state = "GA", zip = "30339")
geocode.2010("Atlanta", street = "2300 Windy Ridge Pkwy", city = "Atlanta", state = "GA", zip = "30339")
geocode.2010("Atlanta", street = NULL, city = "Atlanta", state = "GA", zip = NULL)
geocode.2010 = function(id, street = NULL, city = NULL, state = NULL, zip = NULL){
street = gsub("[.#,]", "", street)
street = gsub(" ", "+", street)
city = gsub(" ", "", city)
zip = substring(zip, 1, 5)
url = paste("http://geocoding.geo.census.gov/geocoder/geographies/",
"address?street=", street,
"&city=", city,
"&state=", state,
"&zip=", zip,
"&benchmark=Public_AR_Census2010&vintage=Census2010_Census2010&",
"layers=10&format=json", sep = "")
doc = lapply(url, function(x) {fromJSON(file = x)})
scraped = lapply(doc, function(x){ data.frame(unlist(x))})
scraped = lapply(scraped, function(x) {x[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(x)),]})
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame = cbind(id, scraped.frame)
names(scraped.frame) = c("id", "long", "lat", "GEOID")
return(scraped.frame)
}
#'@param token Go to http://www.census.gov/developers/ to request an API key. This function will not work if you do not have your own unique key. There is no default.
geocode.2010
geocode.2010("Nashville", city = "Nashville")
geocode.2010("Nashville", city = "Nashville")
isntall_github("demogromatics", "nancyorgan")
library("devtools")
isntall_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?demogromatics
library("medtools")
?medtools
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?demogromatics
library("demogromatics")
?demogromatics
X
Y
100/69
states = Cs(tennessee, kentucky, mississippi, alabama, georgia)
tn = map_data("county", region = states)
usa = map_data("county")
Y = mean(tn[tn$subregion == "davidson",]$lat)
X = mean(tn[tn$subregion == "davidson",]$long)
circle = function(center = c(-86.72707,36.21547), r = 100, n = 100){
theta = seq(0,365,length.out = n)
x = center[1] + (r/69)*cos(theta*pi/180)
y = center[2] + abs(sin(center[2]*pi/180))*(r/69)*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
around.atlanta = geocode.2010("Atlanta", street = "2300 Windy Ridge Pkwy", city = "Atlanta", state = "GA", zip = "30339")
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink") +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
circle = function(center = c(-86.72707,36.21547), r = 100, n = 100){
theta = seq(0,365,length.out = n)
x = center[1] + (r/69)*cos(theta*pi/180)
y = center[2] + abs(sin(center[2]*pi/180))*(r/69)*sin(theta*pi/180)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 100)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
around.atlanta = geocode.2010("Atlanta", street = "2300 Windy Ridge Pkwy", city = "Atlanta", state = "GA", zip = "30339")
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink") +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
37.5-35
85-87.5
document()
library("devtools")
document()
getwd()
setwd("/Users/organnl/Desktop/demogromatics")
getwd()
document
document()
document()
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
?geocode.2010
