process.shapefiles(folder = "/Users/organnl/Desktop/tl_2010_47_county00", shapefile = "tl_2010_47_county00")
library("ggplot2")
library("rdgdal")
library("rgdal")
process.shapefiles = function(folder, shapefile){
block = readOGR(dsn = folder, layer = shapefile)
block@data$id = rownames(block@data)
block.points = fortify(block, region = "id")
block.df = join(block.points, block@data, by = "id")
block.df = subset(block.df, select = c(long, lat, group, BKGPIDFP00))
names(block.df) = c("long", "lat", "group", "GEOID")
block.df
}
process.shapefiles(folder = "/Users/organnl/Desktop/tl_2010_47_county00", shapefile = "tl_2010_47_county00")
library("plyr")
process.shapefiles(folder = "/Users/organnl/Desktop/tl_2010_47_county00", shapefile = "tl_2010_47_county00")
Q
process.shapefiles(dsn = "/Users/organnl/Desktop/tl_2010_47_county00", layer = "tl_2010_47_county00")
readOGR(dsn = "/Users/organnl/Desktop/tl_2010_47_county00", layer = "tl_2010_47_county00")
nancy = readOGR(dsn = "/Users/organnl/Desktop/tl_2010_47_county00", layer = "tl_2010_47_county00")
head(nancy)
block = nanc
block = nancy
block@data$id = rownames(block@data)
block.points = fortify(block, region = "id")
head(block.points)
block.df = join(block.points, block@data, by = "id")
head(block.df)
process.shapefiles = function(folder, shapefile){
block = readOGR(dsn = folder, layer = shapefile)
block@data$id = rownames(block@data)
block.points = fortify(block, region = "id")
block.df = join(block.points, block@data, by = "id")
#block.df = subset(block.df, select = c(long, lat, group, BKGPIDFP00))
#names(block.df) = c("long", "lat", "group", "GEOID")
block.df
}
process.shapefiles(dsn = "/Users/organnl/Desktop/tl_2010_47_county00", layer = "tl_2010_47_county00")
process.shapefiles(folder = "/Users/organnl/Desktop/tl_2010_47_county00", file = "tl_2010_47_county00")
process.shapefiles(folder = "/Users/organnl/Desktop/tl_2010_47_county00", shapefile = "tl_2010_47_county00")
process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:*", sep = ""))))$state
process.api.data = function(datalist){
remove.header = datalist[-1]
remove.NULL = lapply(remove.header, function(x) do.call(c,lapply(x, function(z) {z[is.null(z)] <- NA;z})))
df = ldply(remove.NULL)
names(df) = ldply(datalist[1])
df
}
process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:*", sep = ""))))$state
library("rjson") ##
process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:*", sep = ""))))$state
token = "d2a5fa6361536255294468c21a3fbb3d5bad59cc"
token = "d2a5fa6361536255294468c21a3fbb3d5bad59cc"
process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:*", sep = ""))))$state
states = Cs(tennessee, kentucky, mississippi, alabama, georgia)
tn = map_data("county", region = "tennessee")
Y = mean(tn[tn$subregion == "davidson",]$lat)
X = mean(tn[tn$subregion == "davidson",]$long)
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group), color = NA) +
coord_map()
mapcalc(115,42)
library("mapcalc")
mapcalc(115,42)
95/.5
fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:*", sep = "")))
process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:*", sep = ""))))
download.shapefiles = function(url){
state.shapes = list(rep(data.frame(NULL), length(url)))
for(i in 1:length(url)){
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = url[i], destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state.shapes[[i]] = process.shapefiles(temp.dir, strsplit(basename(url[i]), split = "\\.")[[1]][1])
unlink(temp.dir)
unlink(temp.file)
}
us.shapefiles.glued = data.frame(rbindlist(state.shapes))
}
download.shapefiles()
download.shapefiles
url = paste("http://www2.census.gov/geo/tiger/TIGER2010/BG/2000/tl_2010_",
"47"","_bg00.zip", sep = "")
url = paste("http://www2.census.gov/geo/tiger/TIGER2010/BG/2000/tl_2010_",
"47","_bg00.zip", sep = "")
url
download.shapefiles = function(url){
state.shapes = list(rep(data.frame(NULL), length(url)))
for(i in 1:length(url)){
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = url[i], destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state.shapes[[i]] = process.shapefiles(temp.dir, strsplit(basename(url[i]), split = "\\.")[[1]][1])
unlink(temp.dir)
unlink(temp.file)
}
shapefiles.glued = data.frame(rbindlist(state.shapes))
return(shapefiles.glued)
}
download.shapefiles(url)
library("data.table") ##
download.shapefiles(url)
download.shapefiles = function(url){
state.shapes = list(rep(data.frame(NULL), length(url)))
for(i in 1:length(url)){
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = url[i], destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state.shapes[[i]] = process.shapefiles(temp.dir, strsplit(basename(url[i]), split = "\\.")[[1]][1])
unlink(temp.dir)
unlink(temp.file)
}
shapefiles.glued = data.frame(rbindlist(state.shapes))
}
download.shapefiles(url)
head(shapefiles.glued)
head(download.shapefiles)
process.shapefiles = function(folder, shapefile){
block = readOGR(dsn = folder, layer = shapefile)
block@data$id = rownames(block@data)
block.points = fortify(block, region = "id")
block.df = join(block.points, block@data, by = "id")
block.df = subset(block.df, select = c(long, lat, group, BKGPIDFP00))
names(block.df) = c("long", "lat", "group", "GEOID")
block.df
}
for(i in 1:length(url)){
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = url[i], destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state.shapes[[i]] = process.shapefiles(temp.dir, strsplit(basename(url[i]), split = "\\.")[[1]][1])
unlink(temp.dir)
unlink(temp.file)
}
process.api.data = function(datalist){
remove.header = datalist[-1]
remove.NULL = lapply(remove.header, function(x) do.call(c,lapply(x, function(z) {z[is.null(z)] <- NA;z})))
df = ldply(remove.NULL)
names(df) = ldply(datalist[1])
df
}
download.shapefiles = function(url){
state.shapes = list(rep(data.frame(NULL), length(url)))
for(i in 1:length(url)){
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = url[i], destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state.shapes[[i]] = process.shapefiles(temp.dir, strsplit(basename(url[i]), split = "\\.")[[1]][1])
unlink(temp.dir)
unlink(temp.file)
}
shapefiles.glued = data.frame(rbindlist(state.shapes))
}
download.shapefiles(url = "http://www2.census.gov/geo/tiger/TIGER2010/BG/2000/tl_2010_47_bg00.zip")
download.shapefiles = function(url){
state.shapes = list(rep(data.frame(NULL), length(url)))
for(i in 1:length(url)){
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = url[i], destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state.shapes[[i]] = process.shapefiles(temp.dir, strsplit(basename(url[i]), split = "\\.")[[1]][1])
unlink(temp.dir)
unlink(temp.file)
}
shapefiles.glued = data.frame(rbindlist(state.shapes))
shapefiles.glued
}
download.shapefiles(url = "http://www2.census.gov/geo/tiger/TIGER2010/BG/2000/tl_2010_47_bg00.zip")
download.shapefiles = function(url){
state.shapes = list(rep(data.frame(NULL), length(url)))
for(i in 1:length(url)){
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = url[i], destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state.shapes[[i]] = process.shapefiles(temp.dir, strsplit(basename(url[i]), split = "\\.")[[1]][1])
unlink(temp.dir)
unlink(temp.file)
}
shapefiles.glued = data.frame(rbindlist(state.shapes))
return(shapefiles.glued)
}
)
download.shapefiles(url = "http://www2.census.gov/geo/tiger/TIGER2010/BG/2000/tl_2010_47_bg00.zip")
head(shapefiles.glued)
head(download.shapefiles)
sally = download.shapefiles(url = "http://www2.census.gov/geo/tiger/TIGER2010/BG/2000/tl_2010_47_bg00.zip")
head(sally)
library("devtools")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
getwd*()
getwd()
getwd("/Users/organnl/Destkop/demogromatics")
setwd("/Users/organnl/Destkop/demogromatics")
setwd("/Users/organnl/Desktop/demogromatics")
getwd()
document()
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
?demogromatics
library("demogromatics")
?demogromatics
library("demogromatics")
?demogromatics
?process.api.data
library("medtools")
?medtools
