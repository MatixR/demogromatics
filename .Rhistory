}
circle = function(center = c(0,0), r = 1, n = 100){
theta = seq(0,2.2*pi,length.out = n)
x = center[1] + r*cos(theta)
y = center[2] + (center[2]/69)*r*sin(theta)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
circle = function(center = c(0,0), r = 1, n = 100){
theta = seq(0,2.2*pi,length.out = n)
x = center[1] + r*cos(theta)
y = center[2] + (center[2]*69/90)*r*sin(theta)
return(data.frame(x,y))
}
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
Y/90
Y/90*69
69*Y/90
circle = function(center = c(0,0), r = 1, n = 100){
theta = seq(0,2.2*pi,length.out = n)
x = center[1] + r*cos(theta)
y = center[2] + (center[2]*2*90)*r*sin(theta)
return(data.frame(x,y))
}
69*Y/90
around.nashville = circle(center = c(X,Y), r = 2)
around.nashville = data.frame(around.nashville, group = rep(1, dim(around.nashville)[1]))
ggplot(tn, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = group),color = NA) +
coord_map() +
geom_point(aes(X,Y)) +
geom_path(dat = around.nashville, aes(x = x, y = y, group = group)) +
geom_polygon(dat = around.nashville, aes(x = x, y = y, group = group), alpha = 1/5, fill = "hotpink")
library("medtools")
mapcalc
mapcalc(115,48)
90/.6
90/.6
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 6){
ifelse(is.na(liter), o2sat/fio2,
ifelse(is.na(fio2), o2sat/(0.24 + liter*.03), "Not enough information provided")
}
ifelse(is.na(liter), o2sat/fio2,
ifelse(is.na(fio2), o2sat/(0.24 + liter*.03), "Not enough information provided"))
}
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 6){
ifelse(is.na(liter), o2sat/fio2,
ifelse(is.na(fio2), o2sat/(0.24 + liter*.03), "Not enough information provided"))
}
SF.ratio()
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = NA){
ifelse(is.na(liter), o2sat/fio2,
ifelse(is.na(fio2), o2sat/(0.24 + liter*.03), "Not enough information provided"))
}
SF.ratio
SF.ratio()
90/.4
SF.ratio(liter = 6)
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = NA){
ifelse(is.na(liter), o2sat/fio2,
ifelse(is.na(fio2), o2sat/(0.24 + liter*.03),
ifelse(is.na(fio2) & is.na(liter), "Not enough information provided",
o2sat/fio2)))
}
SF.ratio()
SF.ratio(liter = 7)
SF.ratio(liter = 1)
?is.na
is.null
?is.null
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = null){
ifelse(is.null(liter), o2sat/fio2,
ifelse(is.null(fio2), o2sat/(0.24 + liter*.03),
ifelse(is.null(fio2) & is.null(liter), "Not enough information provided",
o2sat/fio2)))
}
SF.ratio(liter = 1)
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = NA){
ifelse(is.na(liter), o2sat/fio2,
ifelse(is.na(fio2), o2sat/(0.24 + liter*.03),
ifelse((is.na(fio2) & is.na(liter)), "Not enough information provided",
o2sat/fio2)))
}
SF.ratio(liter = )
SF.ratio(liter = 8 )
is.na(fio2)
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = NA){
ifelse(is.na(liter) == TRUE, o2sat/fio2,
ifelse(is.na(fio2) == TRUE, o2sat/(0.24 + liter*.03),
ifelse((is.na(fio2) == TRUE & is.na(liter) == TRUE), "Not enough information provided",
o2sat/fio2)))
}
SF.ratio()
SF.ratio(liter = 8)
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 8){
ifelse(is.na(liter), o2sat/fio2,
ifelse(is.na(fio2), o2sat/(0.24 + liter*.03),
ifelse((is.na(fio2) & is.na(liter)), "Not enough information provided",
o2sat/fio2)))
}
SF.ratio()
SF.ratio(liter = 8)
SF.ratio(fio2 = .6)
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 8){
ifelse(is.null(liter), o2sat/fio2,
ifelse(is.null(fio2), o2sat/(0.24 + liter*.03),
ifelse((is.null(fio2) & is.null(liter)), "Not enough information provided",
o2sat/fio2)))
}
SF.ratio(fio2 = .6)
SF.ratio()
SF.ratio(liter = 9)
9*0.3
9*0.03
9*0.03 + 24
9*0.03 + .24
9*0.03 + .21
?missing
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 8){
ifelse(missing(liter), o2sat/fio2,
ifelse(missing(fio2), o2sat/(0.21 + liter*.03),
ifelse((missing(fio2) & missing(liter)), "Not enough information provided",
o2sat/fio2)))
}
SF.ratio(liter = 9)
SF.ratio(liter = 8)
SF.ratio(liter = 7)
SF.ratio(liter = 8, fio2 = 1)
SF.ratio(liter = 8, fio2 = /8)
SF.ratio(liter = 8, fio2 = .8)
SF.ratio(o2sat = 70)
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 8){
ifelse(missing(liter), o2sat/fio2,
ifelse(missing(fio2), o2sat/(0.21 + liter*.03),
o2sat/fio2)))
}
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 8){
ifelse(missing(liter), o2sat/fio2,
ifelse(missing(fio2), o2sat/(0.21 + liter*.03),
o2sat/fio2)))
}
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 8){
ifelse(missing(liter), o2sat/fio2,
ifelse(missing(fio2), o2sat/(0.21 + liter*.03),
o2sat/fio2))
}
SF.ratio(o2sat = 70)
SF.ratio
SF.ratio()
library("devtools")
library("roxygen2")
document()
getwd()
setwd("/Users/organnl/Desktop/medtools")
getwd()
document()
80-66.6
13.4/2
80-66.6-8.5
BMI.calc = function(lbs, inch, kg, m){
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
ifelse(missing(lbs)  & missing(inch) & missing(kg), "Not enough information provided",
ifelse(missing(lbs)  & missing(inch) & missing(m),  "Not enough information provided",
ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Not enough information provided",
ifelse(missing(inch) & missing(kg)   & missing(m),  "Not enough information provided",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
"Not enough information provided" )))))))
}
BMI.calc()
BMI.calc(lbs = 120, inch = 63)
BMI.calc(kg = 120, inch = 63)
BMI.calc = function(lbs, inch, kg, m){
ifelse(missing(lbs)  & missing(inch) & missing(kg), "Not enough information provided",
ifelse(missing(lbs)  & missing(inch) & missing(m),  "Not enough information provided",
ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Not enough information provided",
ifelse(missing(inch) & missing(kg)   & missing(m),  "Not enough information provided",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
"Not enough information provided" )))))))
}
BMI.calc = function(lbs, inch, kg, m){
ifelse(missing(lbs)  & missing(inch) & missing(kg), "Not enough information provided",
ifelse(missing(lbs)  & missing(inch) & missing(m),  "Not enough information provided",
ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Not enough information provided",
ifelse(missing(inch) & missing(kg)   & missing(m),  "Not enough information provided",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
"Not enough information provided" )))))))
}
BMI.calc(lbs = 120, inch = 63)
12*6
5*12
BMI.calc = function(lbs = 150, inch = 68, kg = 60, m = 2){
ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
ifelse(missing(inch) & missing(kg)   & missing(m),  "Missing height in inch",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
"Not enough information provided" )))))))
}
BMI.calc()
BMI.calc()
BMI.calc = function(lbs = 150, inch = 68, kg = 60, m = 2){
ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
ifelse(missing(inch) & missing(kg)   & missing(m),  "Missing height in inch",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
"Not enough information provided" )))))))
}
BMI.calc()
13.4-2
13.4-7
13.4/2
7+6.7+.5
.2*60
BMI.calc = function(lbs = 150, inch = 68, kg = 60, m = 2){
#ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
#ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
#ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
#ifelse(missing(inch) & missing(kg)   & missing(m),  "Missing height in inch",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
"Not enough information provided" )))_
}
BMI.calc()
BMI.calc = function(lbs = 150, inch = 68, kg = 60, m = 2){
#ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
#ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
#ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
#ifelse(missing(inch) & missing(kg)   & missing(m),  "Missing height in inch",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
"Not enough information provided" ))))
}
BMI.calc()
BMI.calc = function(lbs = 150, inch = 68, kg = 60, m = 2){
#ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
#ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
#ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
#ifelse(missing(inch) & missing(kg)   & missing(m),  "Missing height in inch",
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
"Not enough information provided" )))
}
BMI.calc()
BMI.calc = function(lbs = 150, inch = 68, kg = 60, m = 2){
#ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
#ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
#ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
#ifelse(missing(inch) & missing(kg)   & missing(m),  "Missing height in inch",
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
"Not enough information provided" )))
}
BMI.calc()
BMI.calc(kg = 50)
BMI.calc = function(lbs = 150, inch = 68, kg, m){
#ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
#ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
#ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
#ifelse(missing(inch) & missing(kg)   & missing(m),  "Missing height in inch",
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
"Not enough information provided" )))
}
BMI.calc()
BMI.calc()
BMI.calc(kg = 55)
Q
BMI.calc = function(lbs = 150, inch = 68, kg, m){
#ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
#ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
#ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
#ifelse(missing(inch) & missing(kg)   & missing(m), "Missing height in inch",
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
"Not enough information provided" )))
}
BMI.calc(kg = 55)
BMI.calc = function(lbs = 150, inch = 68, kg, m){
#ifelse(missing(lbs)  & missing(inch) & missing(kg), "Missing weight in kg",
#ifelse(missing(lbs)  & missing(inch) & missing(m),  "Missing height in m",
#ifelse(missing(lbs)  & missing(kg)   & missing(m),  "Missing weight in lbs",
#ifelse(missing(inch) & missing(kg)   & missing(m), "Missing height in inch",
ifelse(missing(kg), (lbs/inch^2)*703,
ifelse(missing(lbs), kg/(m^2),
ifelse(missing(m), kg/((inch*39.37)^2)),
ifelse(missing(inch), lbs/((m*0.0254)^2)),
ifelse(missing(lbs) & missing(m), kg/((inch*39.37)^2),
ifelse(missing(kg) & missing(inch), lbs/((m*0.0254)^2)),
"Not enough information provided" )))
}
BMI.calc()
BMI.calc(kg = 50)
Q
300/8
library(RCurl)
library(Hmisc)
curl_handle = getCurlHandle()
curlSetOpt(ssl.verifypeer = FALSE, curl = curl_handle)
y.contact<- postForm('https://redcap.vanderbilt.edu/api/',
#token = '3B777CF402960B14D884A3FC03B852A3',
token = 'DA5D9AC9DDE451C6CB6D35C9FA155346',
content = 'record',
format = 'csv',
type = 'flat',
forms = "contact_information",
fields = "id",
curl = curl_handle,
exportDataAccessGroups = TRUE)
contact.data <- read.csv(file = textConnection(y.contact), header = TRUE, sep = ",", na.strings = "",
stringsAsFactors = FALSE)
contact.data$pt_state.factor = factor(contact.data$pt_state,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"))
levels(contact.data$pt_state.factor)=c("AL","AK","AS","AZ","AR","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LS","MA","ME","MD","MI","MN","MO","MS","MT","NE","NH","NV","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY")
#source("/Users/organnl/Desktop/MINDUSA/mindusa_phase1_redcap.r")
names(contact.data)
these = c("id", "redcap_event_name", "redcap_data_access_group", "sex", "pt_street", "pt_city", "pt_state", "pt_zip")
contact = cbind(subset(contact.data, select = these), contact.data$pt_state.factor)
#contact = subset(contact, redcap_event_name == "enrollment_trial_d_arm_1")
contact = subset(contact, redcap_event_name == "enrollment__day_0_arm_1")
contact = subset(contact, select = -c(redcap_event_name, redcap_data_access_group, pt_state,id, sex))
head(contact)
names(contact) = Cs(street, city, zip, state)
contact$street = gsub("[.#,]", "", contact$street)
contact$street = gsub(" ", "+", contact$street)
contact$city = gsub(" ", "", contact$city)
head(contact)
contact = cbind(id = c(1:length(contact$street)), contact)
contact$zip = substring(contact$zip, 1, 5)
contact = subset(contact, street != "")
contact
contact = contact[1:10,]
contact
url = paste("http://geocoding.geo.census.gov/geocoder/geographies/",
"address?street=", contact$street,
"&city=", contact$city,
"&state=", contact$state,
"&zip=", contact$zip,
"&benchmark=Public_AR_Census2010&vintage=Census2010_Census2010&",
"layers=10&format=json", sep = "")
doc = lapply(url, function(x) {fromJSON(file = x)})
library("rjson")
doc = lapply(url, function(x) {fromJSON(file = x)})
doc
scraped = lapply(doc, function(x){ data.frame(unlist(x))})
scraped = lapply(scraped, function(x) {x[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(x)),]})
#scraped = scraped[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(scraped)),]
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame = cbind(scraped.frame, contact$id)
names(scraped.frame) = c("long", "lat", "GEOID", "id")
scraped.frame
names(scraped.frame) = c("id", "long", "lat", "GEOID")
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame = cbind( contact$id, scraped.frame)
names(scraped.frame) = c("id", "long", "lat", "GEOID")
scraped.frame
geocode.2010 = function(street, city, state, zip){
url = paste("http://geocoding.geo.census.gov/geocoder/geographies/",
"address?street=", street,
"&city=", city,
"&state=", cstate,
"&zip=", zip,
"&benchmark=Public_AR_Census2010&vintage=Census2010_Census2010&",
"layers=10&format=json", sep = "")
doc = lapply(url, function(x) {fromJSON(file = x)})
scraped = lapply(doc, function(x){ data.frame(unlist(x))})
scraped = lapply(scraped, function(x) {x[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(x)),]})
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame = cbind(contact$id, scraped.frame)
names(scraped.frame) = c("id", "long", "lat", "GEOID")
return(scraped.frame)
}
geocode.2010
geocode.2010(2505 Essex Place, Nashville, TN, 37212)
geocode.2010("2505 Essex Place", "Nashville", "TN", "37212")
geocode.2010 = function(street, city, state, zip){
url = paste("http://geocoding.geo.census.gov/geocoder/geographies/",
"address?street=", street,
"&city=", city,
"&state=", state,
"&zip=", zip,
"&benchmark=Public_AR_Census2010&vintage=Census2010_Census2010&",
"layers=10&format=json", sep = "")
doc = lapply(url, function(x) {fromJSON(file = x)})
scraped = lapply(doc, function(x){ data.frame(unlist(x))})
scraped = lapply(scraped, function(x) {x[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(x)),]})
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame = cbind(contact$id, scraped.frame)
names(scraped.frame) = c("id", "long", "lat", "GEOID")
return(scraped.frame)
}
geocode.2010("2505 Essex Place", "Nashville", "TN", "37212")
geocode.2010("2505+Essex+Place", "Nashville", "TN", "37212")
contact
geocode.2010 = function(id, street, city, state, zip){
url = paste("http://geocoding.geo.census.gov/geocoder/geographies/",
"address?street=", street,
"&city=", city,
"&state=", state,
"&zip=", zip,
"&benchmark=Public_AR_Census2010&vintage=Census2010_Census2010&",
"layers=10&format=json", sep = "")
doc = lapply(url, function(x) {fromJSON(file = x)})
scraped = lapply(doc, function(x){ data.frame(unlist(x))})
scraped = lapply(scraped, function(x) {x[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(x)),]})
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame = cbind(id, scraped.frame)
names(scraped.frame) = c("id", "long", "lat", "GEOID")
return(scraped.frame)
}
geocode.2010("Nancy", "2505+Essex+Place", "Nashville", "TN", "37212")
geocode.2010 = function(id, street, city, state, zip){
street = gsub("[.#,]", "", street)
street = gsub(" ", "+", street)
city = gsub(" ", "", city)
zip = substring(zip, 1, 5)
url = paste("http://geocoding.geo.census.gov/geocoder/geographies/",
"address?street=", street,
"&city=", city,
"&state=", state,
"&zip=", zip,
"&benchmark=Public_AR_Census2010&vintage=Census2010_Census2010&",
"layers=10&format=json", sep = "")
doc = lapply(url, function(x) {fromJSON(file = x)})
scraped = lapply(doc, function(x){ data.frame(unlist(x))})
scraped = lapply(scraped, function(x) {x[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(x)),]})
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame = cbind(id, scraped.frame)
names(scraped.frame) = c("id", "long", "lat", "GEOID")
return(scraped.frame)
}
geocode.2010("2505 Essex Place", "Nashville", "TN", "37212")
geocode.2010("Nancy", "2505 Essex Place", "Nashville", "TN", "37212")
geocode.2010("Cloyne", "2600 Ridge Road", "Berkeley", "CA", "94709")
getwd()
setwd("/Users/organnl/Desktop/demogromatics")
getwd()
document()
document()
library("rjson")
document()
document()
document()
