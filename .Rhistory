brain1 = subset(brain1, street != "")
head(brain1)
vanderbilt.geocoded = mapquest.geocoder(id = brain1$id, street = brain1$street, city = brain1$city,
state = brain1$state, zip = brain1$zip, year = 2000)
head(vanderbilt.geocoded)
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vandy.geocoded.csv", row.names = FALSE)
############################ ST THOMAS ###################
vanderbilt.geocoded.na = vanderbilt.geocoded[is.na(vanderbilt.geocoded$GEOID),]
write.csv(vanderbilt.geocoded.na, "/Users/organnl/Desktop/SES_Project/vandy.geocoded.csv", row.names = FALSE)
getwd()
setwd("/Users/organnl/Desktop/SES_Project")
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vandy.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded.na, "/Users/organnl/Desktop/SES_Project/vandy.geocoded.csv", row.names = FALSE)
dim(vanderbilt.geocoded)
dim(vanderbilt.geocodedna)
dim(vanderbilt.geocoded.na)
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vandy.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded.na, "/Users/organnl/Desktop/SES_Project/vandy.geocoded.csv", row.names = FALSE)
getwd()
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded.na, "/Users/organnl/Desktop/SES_Project/vanderbild.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded.na, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded.na, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv", row.names = FALSE)
write.csv(vanderbilt.geocoded.na, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.na.csv", row.names = FALSE)
dim(vanderbilt.geocoded)
dim(vanderbilt.geocoded.na)
brain2 = read.csv("/Users/organnl/Desktop/SES_Project/wtmiw/BRAIN2.csv")
names(brain2)
brain2 = subset(brain2, select = c(Study_.ID, Address_1, City, State, Zip_Code))
names(brain2) = c("id", "street", "city", "state", "zip")
#brain2[brain2$Address_2 != "",] #Use this to see if any of the address2's are influential
brain2$street = gsub("[.#@,]", "", brain2$street)
brain2$street = gsub(" ", "+", brain2$street)
brain2$street = gsub("apt", "", brain2$street)
brain2$zip = substring(brain2$zip, 1, 5)
brain2 = subset(brain2, street != "")
head(brain2)
thomas.geocoded = mapquest.geocoder(id = brain2$id, street = brain2$street, city = brain2$city,
state = brain2$state, zip = brain2$zip, year = 2000)
thomas.geocoded.na = thomas.geocoded[is.na(thomas.geocoded$GEOID),]
write.csv(thomas.geocoded, "/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv", row.names = FALSE)
write.csv(thomas.geocoded.na, "/Users/organnl/Desktop/SES_Project/thomas.geocoded.na.csv", row.names = FALSE)
dim(brain1)
dim(brain2)
dim(thomas.geocoded)
thomas.geocoded = mapquest.geocoder(id = brain2$id, street = brain2$street, city = brain2$city,
state = brain2$state, zip = brain2$zip, year = 2000)
thomas.geocoded.na = thomas.geocoded[is.na(thomas.geocoded$GEOID),]
write.csv(thomas.geocoded, "/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv", row.names = FALSE)
write.csv(thomas.geocoded.na, "/Users/organnl/Desktop/SES_Project/thomas.geocoded.na.csv", row.names = FALSE)
dim(thomas.geocoded)
dim(thomas.geocoded.na)
geocode.2010(vanderbilt.geoocoded)
vanderbilt.geocoded.na
geocode.2010(vanderbilt.geoocoded.na$id, vanderbilt.geocoded$street, vanderbilt.geocoded$city,
vanderbilt.geocoded$state, vanderbilt.geocoded$zip)
vanderbilt.geocoded$state, vanderbilt.geocoded$zip)
eocode.2010(vanderbilt.geoocoded.na$id, vanderbilt.geocoded$street, vanderbilt.geocoded$city,
vanderbilt.geocoded$state, vanderbilt.geocoded$zip)
geocode.2010(vanderbilt.geoocoded.na$id, vanderbilt.geocoded$street, vanderbilt.geocoded$city,
vanderbilt.geocoded$state, vanderbilt.geocoded$zip)
vanderbilt.geocoded.na
vanderbilt.geocoded.na = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.na")
vanderbilt.geocoded.na = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.na.csv")
vanderbilt.geocoded.na
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, vanderbilt.geocoded.na$long,
year = 2000)
FIPS.find
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$long,
year = 2000)
names(vanderbilt.geocoded.na)
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = 2000)
FIPS.find
names(vanderbilt.geocoded.na)
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = 2000)
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = 2000)
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = 2000)
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
index = read.csv("/Users/organnl/Desktop/SES_Project/AHRQ.SES.index.only.csv")
?merge
final = merge(all.geocoded, index, by = GEOID)
head(index)
head(all.geocoded)
final = merge(all.geocoded, index, by = "GEOID")
head(final)
class(all.geocoded$GEOID)
class(index$GEOID)
index$GEOID = as.character(index$GEOID)
final = merge(all.geocoded, index, by = "GEOID")
head(final)
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
index = read.csv("/Users/organnl/Desktop/SES_Project/AHRQ.SES.index.only.csv")
index$GEOID = as.character(index$GEOID)
final = merge(all.geocoded, index, by = "GEOID")
head(final)
final = join(all.geocoded, index)
head(final)
View(final)
head(index)
tail(index)
final = cbind(all.geocoded, SES = rep(NA, length(all.geocoded$id)))
head(final)
final$SES = index$SES_score[index$GEOID == final$GEOID]
subset(index, index$GEOID == all.geocoded$GEOID)
final$SES = index$SES_score[index$GEOID %in% final$GEOID]
final$SES = index$SES_score[final$GEOID %in% index$GEOID]
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
index = read.csv("/Users/organnl/Desktop/SES_Project/AHRQ.SES.index.only.csv")
index$GEOID = as.character(index$GEOID)
final = cbind(all.geocoded, SES = rep(NA, length(all.geocoded$id)))
final$SES = index$SES_score[final$GEOID %in% index$GEOID]
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
index = read.csv("/Users/organnl/Desktop/SES_Project/AHRQ.SES.index.only.csv")
index$GEOID = as.character(index$GEOID)
final = cbind(all.geocoded, SES = rep(NA, length(all.geocoded$id)))
index2 = index[index$GEOID %in% final$GEOID]
head(index2)
index2
ind3x
index
table(nchar(index$GEOID))
table(nchar(all.geocoded$GEOID))
all.geocoded$GEOID
all.geocoded$GEOID[nchar$GEOID == 7]
all.geocoded$GEOID[nchar(all.geocoded($GEOID == 7)]
all.geocoded$GEOID[nchar(all.geocoded$GEOID == 7)]
all.geocoded$GEOID
all.geocoded$GEOID[nchar(all.geocoded$GEOID) == 7]
table(nchar(all.geocoded$GEOID))
nchar(index$GEOID)
head(index$GEOID)
table(nchar(index$GEOID))
head(index$GEOID)
head(all.geocoded$GEOID)
head(index$GEOID[grep("^47", index$GEOID)])
head(index$GEOID[grep("^47*", index$GEOID)])
head(index$GEOID[grep("^47.", index$GEOID)])
head(index$GEOID[grep("^47", index$GEOID)])
head(index$GEOID[grep("^47.*", index$GEOID)])
head(index$GEOID[grep("^47$", index$GEOID)])
head(index$GEOID[grep("^47", index$GEOID)])
class(index$GEOID)
head(index$GEOID[grep("^4", index$GEOID)])
head(index$GEOID[grep("^5", index$GEOID)])
head(index$GEOID[grep("^47", index$GEOID)])
head(index$GEOID[grep("^48", index$GEOID)])
FIPS.find = function(lat, long, year){
url = paste("http://data.fcc.gov/api/block/", year,
"/find?latitude=", lat,
"&longitude=", long,
"&showall=true",
"&format=xml",sep = "")
doc = lapply(url, function(x) {xmlParse(x)})
root = lapply(doc, function(x) {xmlRoot(x)})
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = lapply(fips, function(x) {substr(x, 1, 12)})
as.vector(unlist(fips))
}
read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.na.csv")
head(anderbilt.geocoded.na)
vanderbilt.geocoded.na = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.na.csv")
#vanderbilt.geocoded.na = vanderbilt.geocoded[is.na(vanderbilt.geocoded$GEOID),]
geocode.2010(vanderbilt.geoocoded.na$id, vanderbilt.geocoded$street, vanderbilt.geocoded$city,
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = 2000)
variables = paste("P001001,P043007,P043014,P043003,P043010,P087002,P087001,",
"H085001,H085001,P037011,P037028,P037001,P037015,P037032,",
"P037001,H020005,H020006,H020007,H020011,H020012,H020013,",
"H020001,H020008,P053001", sep = "")
?demogromatics
index.data = census.2000.bg(token = "d2a5fa6361536255294468c21a3fbb3d5bad59cc", variables = variables)
head(index.data)
class(index.data$GEOID)
index.data$GEOID = as.character(index.data$GEOID)
table(nchar(index.data$GEOID))
head(index.data$GEOID[grep("^47.", index.data$GEOID)])
index.data = us.blocks.merged
us.blocks.merged = index.data
SES_measures = data.frame(GEOID = us.blocks.merged$GEOID, crowded,prop100, pct_poverty,hhinc100,high_educ,low_educ,pct_unemp)
SES_measures = SES_measures[complete.cases(SES_measures),]
SES_score = 50 + (-0.07*SES_measures$crowded) + (0.08*SES_measures$prop100) + (-0.10*SES_measures$pct_poverty) +
(0.11*SES_measures$hhinc100) + (0.10*SES_measures$high_educ) + (-0.11*SES_measures$low_educ) +
(-0.08*SES_measures$pct_unemp)
names(us.blocks.merged)
# Unemployment: -0.66
# Percentage of persons aged 16 years or older in the labor force who are unemployed (and actively seeking work)
# P043007  Total: Male: In labor force: Civilian: Unemployed P43. Sex by Employment Status for the Population 16 Years and Over [1]
# P043014  Total: Female: In labor force: Civilian: Unemployed P43. Sex by Employment Status for the Population 16 Years and Over [1]
# -- P043003  Total: Male: In labor force:
# -- P043002  Total: Male:
# -- P043010  Total: Female: In labor force:
# -- P043009  Total: Female:
# -- P043001  Total: Population 16 years and over
#pct_unemp = 100*(us.blocks.merged$P043007 + us.blocks.merged$P043014)/us.blocks.merged$P043001
pct_unemp = 100*(us.blocks.merged$P043007 + us.blocks.merged$P043014)/(us.blocks.merged$P043003 + us.blocks.merged$P043010)
# Income:
# Percentage of persons below the federally defined poverty line -0.79
# P087001  Total: Population for whom poverty status is determined  P87. Poverty Status in 1999 by Age [17]
# P087002  Total: Income in 1999 below poverty level:  P87. Poverty Status in 1999 by Age [17]
pct_poverty = 100*us.blocks.merged$P087002/us.blocks.merged$P087001
# Median household income 0.85
# P053001  Median household income in 1999 Households	P53. Median Household Income in 1999 (Dollars) [1]
hhinc100 = us.blocks.merged$P053001/max(us.blocks.merged$P053001)*100
# Wealth: 0.64
# Median value of owner-occupied homes
# H085001  Median value Owner-occupied housing units	H85. Median Value (Dollars) for All Owner-occupied Housing Units [1]
prop100 = us.blocks.merged$H085001/max(us.blocks.merged$H085001)*100
# Education
# Percentage of persons aged > 25 years with less than a 12th-grade education -0.84
# P037011  Total: Male: High school graduate (includes equivalency)	P37. Sex by Educational Attainment for the Population 25 Years and Over [35]
# P037028  Total: Female: High school graduate (includes equivalency)	P37. Sex by Educational Attainment for the Population 25 Years and Over [35]
# P037001  Total: Population 25 years and over
low_educ = 100*(us.blocks.merged$P037011 + us.blocks.merged$P037028)/us.blocks.merged$P037001
# Percentage of persons aged > 25 years with at least 4 years of college 0.79
# P037015  Total: Male: Bachelor's degree
# P037032  Total: Female: Bachelor's degree
high_educ = 100*(us.blocks.merged$P037015 + us.blocks.merged$P037032)/us.blocks.merged$P037001
# Housing -0.56
# Percentage of households containing one or more person per room
# H020005  Total: Owner occupied: 1.01 to 1.50 occupants per room	H20. Tenure by Occupants per Room [13]
# H020006	 Total: Owner occupied: 1.51 to 2.00 occupants per room	H20. Tenure by Occupants per Room [13]
# H020007	 Total: Owner occupied: 2.01 or more occupants per room	H20. Tenure by Occupants per Room [13]
# H020011  Total: Renter occupied: 1.01 to 1.50 occupants per room	H20. Tenure by Occupants per Room [13]
# H020012	 Total: Renter occupied: 1.51 to 2.00 occupants per room	H20. Tenure by Occupants per Room [13]
# H020013	 Total: Renter occupied: 2.01 or more occupants per room	H20. Tenure by Occupants per Room [13]
# -- H020001  Total: Occupied housing units
# -- H020008  Total: Renter occupied
crowded = 100*(us.blocks.merged$H020005 + us.blocks.merged$H020006  + us.blocks.merged$H020007 +
us.blocks.merged$H020011 + us.blocks.merged$H020012 + us.blocks.merged$H020013)/
(us.blocks.merged$H020001 + us.blocks.merged$H020008)
SES_measures = data.frame(GEOID = us.blocks.merged$GEOID, crowded,prop100, pct_poverty,hhinc100,high_educ,low_educ,pct_unemp)
SES_measures = SES_measures[complete.cases(SES_measures),]
SES_score = 50 + (-0.07*SES_measures$crowded) + (0.08*SES_measures$prop100) + (-0.10*SES_measures$pct_poverty) +
(0.11*SES_measures$hhinc100) + (0.10*SES_measures$high_educ) + (-0.11*SES_measures$low_educ) +
(-0.08*SES_measures$pct_unemp)
head(SES_score)
index.only = data.frame(SES_measures, SES_score)
head(index.only)
index.only = data.frame(us.blocks.merged$GEOID, SES_score)
index.only = data.frame(SES_measures, SES_score)
head(index.only)
head(index.only[grep("^47.", index.only$GEOID),])
head(index.data)
us.blocks.merged = index.data
SES_measures = data.frame(GEOID = us.blocks.merged$GEOID, crowded,prop100, pct_poverty,hhinc100,high_educ,low_educ,pct_unemp)
SES_measures = SES_measures[complete.cases(SES_measures),]
SES_score = 50 + (-0.07*SES_measures$crowded) + (0.08*SES_measures$prop100) + (-0.10*SES_measures$pct_poverty) +
(0.11*SES_measures$hhinc100) + (0.10*SES_measures$high_educ) + (-0.11*SES_measures$low_educ) +
(-0.08*SES_measures$pct_unemp)
index.only = data.frame(SES_measures, SES_score)
head(SES_measure)
head(SES_measures)
index.only = data.frame(SES_measures, SES_score)
head(index.only)
index.only = data.frame(SES_measures$GEOID, SES_score)
head(index.only)
index.only = data.frame(GEOID = SES_measures$GEOID, SES_score)
head(index.only)
write.csv(index.only,"/Users/organnl/Desktop/ahrq.index.only", row.names = FALSE)
head(index.only)
write.csv(index.only,"/Users/organnl/Desktop/ahrq.index.only", row.names = FALSE)
#index.only = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
class(index.only$GEOID)
index.only$GEOID = as.character(index.only$GEOID)
final = cbind(all.geocoded, SES = rep(NA, length(all.geocoded$id)))
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
vanderbilt.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv")
thomas.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv")
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
index.only$GEOID = as.character(index.only$GEOID)
final = cbind(all.geocoded, SES = rep(NA, length(all.geocoded$id)))
index2 = index[index$GEOID %in% final$GEOID]
index2 = index.only[index.only$GEOID %in% final$GEOID]
head(final)
index2 = index.only[index.only$GEOID %in% final$GEOID,]
head(index2)
dim(index2)
dim(all.geocoded)
length(unique(all.geocoded$GEOID))
final$SES = index2$SES_score[final$GEOID %in% index2$GEOID]
head(join(final, index2))
write.csv(index.only,"/Users/organnl/Desktop/SES_Project/ahrq.index.only", row.names = FALSE)
index = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
write.csv(index.only,"/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv", row.names = FALSE)
vanderbilt.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv")
thomas.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv")
index = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
index = as.character(index$GEOID)
index.needed = index[index$GEOID %in% final$all.geocoded$GEOID,]
index.needed = index[index$GEOID %in% all.geocoded$GEOID,]
index.needed = index[index$GEOID %in% all.geocoded$GEOID,]
index
head(index)
index.only = data.frame(GEOID = SES_measures$GEOID, SES_score)
head(index.only)
write.csv(index.only,"/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv", row.names = FALSE)
head(index.only)
vanderbilt.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv")
thomas.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv")
index = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
head(index)
index = as.character(index$GEOID)
index.needed = index[index$GEOID %in% all.geocoded$GEOID,]
index$GEOID
index = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
head(index)
index$GEOID = as.character(index$GEOID)
head(index)
index.needed = index[index$GEOID %in% all.geocoded$GEOID,]
head(index.needed)
final = join(all.geocoded, index.needed)
head(final)
sum(is.na(final$GEOID))
vanderbilt.geocodoed.na
vanderbilt.geocoded.na = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.na.csv")
vanderbilt.geocoded
vanderbilt.geocoded[vanderbilt.geocoded$id == vanderbilt.geocoded.na$id,]
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = 2000)
FIPS.find = function(lat, long, year){
url = paste("http://data.fcc.gov/api/block/", year,
"/find?latitude=", lat,
"&longitude=", long,
"&showall=true",
"&format=xml",sep = "")
doc = lapply(url, function(x) {xmlParse(x)})
root = lapply(doc, function(x) {xmlRoot(x)})
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = lapply(fips, function(x) {substr(x, 1, 12)})
as.vector(unlist(fips))
}
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = 2000)
names(vanderbilt.geocoded.na)
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$lat, long = vanderbilt.geocoded.na$lng,
year = "2000")
vanderbilt.geocoded.na
vanderbilt.geocoded.na$GEOID = FIPS.find(lat = vanderbilt.geocoded.na$long, long = vanderbilt.geocoded.na$lat,
year = "2000")
vanderbilt.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv")
thomas.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv")
index = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
head(index)
index$GEOID = as.character(index$GEOID)
index.needed = index[index$GEOID %in% all.geocoded$GEOID,]
head(index.needed)
final = join(all.geocoded, index.needed)
head(final)
sum(is.na(final$GEOID))
vanderbilt.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv")
thomas.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv")
index = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
vanderbilt.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv")
thomas.geocoded = read.csv("/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv")
index = read.csv("/Users/organnl/Desktop/SES_Project/ahrq.index.only.csv")
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
head(all.geocoded)
head(index)
index$GEOID = as.character(index$GEOID)
index.needed = index[index$GEOID %in% all.geocoded$GEOID,]
head(index.needed)
final = join(all.geocoded, index.needed)
head(final)
sum(is.na(final$GEOID))
class(all.geocoded$GEOID)
all.geocoded$GEOID = as.character(all.geocoded$GEOID)
head(all.geocoded)
vanderbilt.geocoded = mapquest.geocoder(id = brain1$id, street = brain1$street, city = brain1$city,
state = brain1$state, zip = brain1$zip, year = 2000)
mapquest.geocoder = function(id, street, city, state, zip, year){
coordinates = data.frame(NULL)
here = paste(street, city, state, zip, sep = " ")
for(i in 1:length(here)){
url = paste('http://www.mapquestapi.com/geocoding/v1/address?key=Fmjtd|luur200anu,aw=o5-9aywq4&callback=renderOptions&inFormat=kvp&outFormat=xml&location=',here[i],'&thumbMaps=false', sep = "")
doc = xmlTreeParse(url)
root = xmlRoot(doc)
coordinates[i,1] = id[i]
coordinates[i,2] = xmlValue(root[[2]][[1]][["locations"]][["location"]][["latLng"]][["lat"]]) #lat
coordinates[i,3] = xmlValue(root[[2]][[1]][["locations"]][["location"]][["latLng"]][["lng"]]) #lng
coordinates[i,4] = FIPS.find(coordinates[i,2], coordinates[i,3], year)
coordinates[i,5] = street[i]
coordinates[i,6] = city[i]
coordinates[i,7] = state[i]
coordinates[i,8] = zip[i]
}
names(coordinates) = c("id", "lat", "lng", "GEOID", "street", "city", "state", "zip")
coordinates
}
#'Finds FIPS code for a given latitude and longitude
#'@param lat Vector of latitudes
#'@param long Vector of longitudes
#'@param year Census year, ie. 2000, 2010, etc.
#'@export
#'@examples
#'FIPS.find(lat = 37.87622, long = -122.2585, year = 2000)
#'[1] "060014225002"
#'
#'
#'
FIPS.find = function(lat, long, year){
url = paste("http://data.fcc.gov/api/block/", year,
"/find?latitude=", lat,
"&longitude=", long,
"&showall=true",
"&format=xml",sep = "")
doc = lapply(url, function(x) {xmlParse(x)})
root = lapply(doc, function(x) {xmlRoot(x)})
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = lapply(fips, function(x) {substr(x, 1, 12)})
as.vector(unlist(fips))
}
vanderbilt.geocoded = mapquest.geocoder(id = brain1$id, street = brain1$street, city = brain1$city,
state = brain1$state, zip = brain1$zip, year = 2000)
brain1 = read.csv("/Users/organnl/Desktop/SES_Project/wtmiw/BRAIN1.csv")
names(brain1)
brain1 = subset(brain1, select = c(Study_.ID, Address_1, City, State, Zip_Code))
names(brain1) = c("id", "street", "city", "state", "zip")
#brain1[brain1$address2 != "",] #Use this to see if any of the address2's are influential
brain1$street = gsub("[.#@,]", "", brain1$street)
brain1$street = gsub(" ", "+", brain1$street)
brain1$street = gsub("apt", "", brain1$street)
brain1$zip = substring(brain1$zip, 1, 5)
brain1 = subset(brain1, street != "")
head(brain1)
vanderbilt.geocoded = mapquest.geocoder(id = brain1$id, street = brain1$street, city = brain1$city,
state = brain1$state, zip = brain1$zip, year = 2000)
dim(vanderbilt.geocoded)
head(vanderbilt.geocoded)
write.csv(vanderbilt.geocoded, "/Users/organnl/Desktop/SES_Project/vanderbilt.geocoded.csv", row.names = FALSE)
thomas.geocoded = mapquest.geocoder(id = brain2$id, street = brain2$street, city = brain2$city,
state = brain2$state, zip = brain2$zip, year = 2000)
brain2 = read.csv("/Users/organnl/Desktop/SES_Project/wtmiw/BRAIN2.csv")
names(brain2)
brain2 = subset(brain2, select = c(Study_.ID, Address_1, City, State, Zip_Code))
names(brain2) = c("id", "street", "city", "state", "zip")
#brain2[brain2$Address_2 != "",] #Use this to see if any of the address2's are influential
brain2$street = gsub("[.#@,]", "", brain2$street)
brain2$street = gsub(" ", "+", brain2$street)
brain2$street = gsub("apt", "", brain2$street)
brain2$zip = substring(brain2$zip, 1, 5)
brain2 = subset(brain2, street != "")
head(brain2)
thomas.geocoded = mapquest.geocoder(id = brain2$id, street = brain2$street, city = brain2$city,
state = brain2$state, zip = brain2$zip, year = 2000)
write.csv(thomas.geocoded, "/Users/organnl/Desktop/SES_Project/thomas.geocoded.csv", row.names = FALSE)
all.geocoded = rbind(vanderbilt.geocoded, thomas.geocoded)
all.geocoded$GEOID = as.character(all.geocoded$GEOID)
head(all.geocoded)
head(index)
index$GEOID = as.character(index$GEOID)
index.needed = index[index$GEOID %in% all.geocoded$GEOID,]
head(index.needed)
final = join(all.geocoded, index.needed)
head(final)
sum(is.na(final$GEOID))
write.csv(final, "/Users/organnl/Desktop/FINAL.csv", row.names = FALSE)
write.csv(final, "/Users/organnl/Desktop/SES_Project/FINAL.csv", row.names = FALSE)
load("/Users/organnl/Desktop/SES_Project/FINAL copy.rda")
write.csv(final, "/Users/organnl/Desktop/SES_Project/FINAL.xlsx", row.names = FALSE)
?write.csv
write.csv(final, "/Users/organnl/Desktop/SES_Project/FINAL.csv", row.names = FALSE)
write(final, "/Users/organnl/Desktop/SES_Project/FINAL", row.names = FALSE)
write(final, "/Users/organnl/Desktop/SES_Project/FINAL")
write.table(final, "/Users/organnl/Desktop/SES_Project/FINAL")
what = read.csv("/Users/organnl/Desktop/SES_Project/FINAL.csv")
head(what)
head(what$GEOID)
FINAL <- read.table("~/Desktop/SES_Project/FINAL", header=TRUE, quote="\"")
View(FINAL)
head(final)
dim(FINAL)
head(FINAL)
dim(FINAL)
head(index)
write.table(index, "/Users/organnl/Desktop/index")
write.table(index, "/Users/organnl/Desktop/SES_Project/index")
summary(index[,2])
library("devtools")
setwd("/Users/organnl/Desktop/demogromatics")
document()
library("roxygen2")
document()
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
